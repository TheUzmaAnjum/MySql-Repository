---- SELECT STATEMENT----
--It is used to work with columns and specify what columns we want to see in our output.
--We can also select specefic number of columns based on our requirement. 
--We can also select everything by saying:

SELECT * 
FROM employee_demographics;

--Let's try selecting a specific column
SELECT first_name
FROM employee_demographics;

--Let's add some more columns, we just need to separate the columns with comma
SELECT first_name, last_name
FROM employee_demographics;

--You can see here we have the total_money_spent - we can perform calculations on this
SELECT first_name,
 last_name,
 total_money_spent,
 total_money_spent + 100
FROM customers;

--Math in SQL does follow PEMDAS which stands for Parenthesis, Exponent, Multiplication,
--Division, Addition, subtraction - it's the order of operation for math

---------------------------------------------------------------------------------------------------------------------
----WHERE Clause----
--The WHERE clause is used to filter records (rows of data)
--It's going to extract only those records that fulfill a specified condition.
--So basically if we say "Where name is = 'John' - only rows were the name = 'John' will return
--So this is only effecting the rows, not the columns
--Let's take a look at how this works

SELECT *
FROM employee_salary
WHERE salary > 50000;

SELECT *
FROM employee_demographics
WHERE gender = 'Female';


---We can also return rows that do have not "Scranton"
SELECT *
FROM employee_demographics
WHERE gender != 'Female';


--We can use WHERE clause with date value also
SELECT *
FROM employee_demographics
WHERE birth_date > '1985-01-01';

-- Here '1990-01-01' is the default data formate in MySQL.
-- There are other date formats as well that we will talk later

----------------------------------------------------------------------------------------------------------------
----LIKE STATEMENT----

-- two special characters a % and a _

-- % means anything
SELECT *
FROM employee_demographics
WHERE first_name LIKE 'a%';

-- _ means a specific value
SELECT *
FROM employee_demographics
WHERE first_name LIKE 'a__';

--------------------------------------------------------------------------------------------------------------
---- GROUP BY----
-- When you use the GROUP BY clause in a MySQL query, it groups together rows that have the same values in the specified columns
-- GROUP BY is going to allow us to group rows that have the same data and run aggregate functions on them

SELECT *
FROM employee_demographics;

-- when you use group by  you have to have the same columns you're grouping on in the 'group by' statement
SELECT gender
FROM employee_demographics
GROUP BY gender;

SELECT occupation
FROM employee_salary
GROUP BY occupation;

-- notice there is only one office manager row
-- when we group by 2 columns we now have a row for both occupation and salary because salary is different
SELECT occupation, salary
FROM employee_salary
GROUP BY occupation, salary;

-- The most useful reason we use group by is so we can perform out aggregate functions on them
SELECT gender, AVG(age)
FROM employee_demographics
GROUP BY gender;

SELECT gender, MIN(age), MAX(age), COUNT(age),AVG(age)
FROM employee_demographics
GROUP BY gender;
-----------------------------------------------------------------------------------------------------------------
---- ORDER BY----
--The ORDER BY keyword is used to sort the result-set in ascending or descending order.
--By default it sorts the records in ascending order.To sort the records in descending order, use the DESC keyword.
--So let's try it out with our customer table
--First let's start simple with just ordering by one column
-- if we use 'ORDER BY' it goes a to z by default (ascending order)
SELECT *
FROM employee_demographics
ORDER BY first_name;

-- we can manually change the order by saying desc
SELECT *
FROM employee_demographics
ORDER BY first_name DESC;

#Now we can also do on multiple columns like this:

SELECT *
FROM employee_demographics
ORDER BY gender, age;

SELECT *
FROM employee_demographics
ORDER BY gender DESC, age DESC;
--Another important thing to know is we don't actually have to spell out the column names.
--We can actually just use their column position

--State is in position 8 and money is in 9, we can use those as well.
SELECT *
FROM employee_demographics
ORDER BY 5 DESC, 4 DESC;
--------------------------------------------------------------------------------------------------------
---HAVING vs WHERE---
-- Both were created to filter rows of data, but they filter 2 separate things
-- 'Where' is going to filters rows based off columns of data
-- 'Having' is going to filter rows based off aggregated columns when grouped

SELECT gender, AVG(age)
FROM employee_demographics
GROUP BY gender
where age > 40;


-- let's try to filter on the avg age using where

SELECT gender, AVG(age)
FROM employee_demographics
WHERE AVG(age) > 40
GROUP BY gender;
-- The above query doesn't work because of order of operations. 
-- On the backend 'Where' comes before the 'group by'. So you can't filter on data that hasn't been grouped yet
-- this is why 'Having' was created

SELECT gender, AVG(age)
FROM employee_demographics
GROUP BY gender
HAVING AVG(age) > 40;
------------------------------------------------------------------------------------------------------------
----LIMIT & ALIASING----
-- Limit is just going to specify how many rows you want in the output

SELECT *
FROM employee_demographics
LIMIT 3;

-- if we change something like the order or use a group by it would change the output

SELECT *
FROM employee_demographics
ORDER BY first_name
LIMIT 3;

--There is an additional paramater in limit which we can access using a comma that specifies the starting place

SELECT *
FROM employee_demographics
ORDER BY first_name
LIMIT 3,2;

-- this says start at position 3 and take 2 rows after that
-- you could use it if you wanted to select the third oldest person by doing this:

SELECT *
FROM employee_demographics
ORDER BY age desc
LIMIT 2,1;


-----ALIASING-----
--Aliasing is just a way to change the name of the column
-- it can also be used in joins, but we will look at that in the intermediate series
-- we can use the keyword AS to specify we are using an Alias
SELECT gender, AVG(age) AS Avg_age
FROM employee_demographics
GROUP BY gender;

-- although we don't actually need it, but it's more explicit which I usually like
SELECT gender, AVG(age) Avg_age
FROM employee_demographics
GROUP BY gender;
